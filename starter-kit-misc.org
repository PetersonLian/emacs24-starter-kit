
#+TITLE: Starter Kit Misc
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Misc
Things that don't fit anywhere else.

** Check Dependencies

Determine whether required packages are installed. If not, use ELPA to
install them. Other dependencies are provided by Emacs 24.
#+begin_src emacs-lisp
;;can not downloaded package magit,so I(Peterson Lian) just ommit anything related to magit
;;  (starter-kit-install-if-needed 'magit)
#+end_src

** Color Themes
Emacs24 has build in support for saving and loading themes.

A Theme builder is available at http://elpa.gnu.org/themes/ along with
a list of pre-built themes at http://elpa.gnu.org/themes/view.html and
themes are available through ELPA.

Downloaded themes may be saved to the =themes/= directory in the base
of the starter kit which ignored by git.  Once downloaded and
evaluated a theme is activated using the =load-theme= function.

** Window systems
#+srcname: starter-kit-window-view-stuff
#+begin_src emacs-lisp 
  (when window-system
    (setq frame-title-format '(buffer-file-name "%f" ("%b")))
    (blink-cursor-mode -1)
    (when (require 'mwheel nil 'no-error) (mouse-wheel-mode t)))
  
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  
  (setq visible-bell t
        echo-keystrokes 0.1
        font-lock-maximum-decoration t
        inhibit-startup-message t
        transient-mark-mode t
        color-theme-is-global t
        delete-by-moving-to-trash t
        shift-select-mode nil
        truncate-partial-width-windows nil
        uniquify-buffer-name-style 'forward
        whitespace-style '(trailing lines space-before-tab
                                    indentation space-after-tab)
        whitespace-line-column 100
        ediff-window-setup-function 'ediff-setup-windows-plain
        oddmuse-directory (concat starter-kit-dir "oddmuse")
        xterm-mouse-mode t
        save-place-file (concat starter-kit-dir "places"))
#+end_src

** Transparently open compressed files
#+begin_src emacs-lisp
(auto-compression-mode t)
#+end_src

** Save a list of recent files visited.
#+begin_src emacs-lisp 
(recentf-mode 1)
#+end_src emacs-lisp

** Highlight matching parentheses when the point is on them.
#+srcname: starter-kit-match-parens
#+begin_src emacs-lisp 
(show-paren-mode 1)
#+end_src

** ido mode
ido-mode is like magic pixie dust!
#+srcname: starter-kit-loves-ido-mode
#+begin_src emacs-lisp 
(when (> emacs-major-version 21)
  (ido-mode t)
  (setq ido-enable-prefix nil
        ido-enable-flex-matching t
        ido-create-new-buffer 'always
        ido-use-filename-at-point t
        ido-max-prospects 10))
#+end_src

** Other, spell checking, tabs, imenu and a coding hook
#+begin_src emacs-lisp 
  (set-default 'indent-tabs-mode nil)
  (set-default 'indicate-empty-lines t)
  (set-default 'imenu-auto-rescan t)
  
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'text-mode-hook 'turn-on-flyspell)
  
  (defvar starter-kit-coding-hook nil
    "Hook that gets run on activation of any programming mode.")
  
  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; Seed the random-number generator
  (random t)
#+end_src

*** functions for prettier source code
#+begin_src emacs-lisp
(defun starter-kit-pretty-lambdas ()
  (font-lock-add-keywords
   nil `(("(\\(lambda\\>\\)"
          (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                    ,(make-char 'greek-iso8859-7 107))
                    nil))))))
#+end_src

*** possible issues/resolutions with flyspell
Most of the solution came from [[http://www.emacswiki.org/emacs/FlySpell][EmacsWiki-FlySpell]].  Here is one
possible fix.

**** Emacs set path to aspell
it's possible aspell isn't in your path
#+begin_src emacs-lisp :tangle no
   (setq exec-path (append exec-path '("/opt/local/bin")))
#+end_src

**** Emacs specify spelling program
- This didn't work at first, possibly because cocoAspell was
  building its dictionary.  Now it seems to work fine.
#+begin_src emacs-lisp :tangle no
  (setq ispell-program-name "aspell"
        ispell-dictionary "english"
        ispell-dictionary-alist
        (let ((default '("[A-Za-z]" "[^A-Za-z]" "[']" nil
                         ("-B" "-d" "english" "--dict-dir"
                          "/Library/Application Support/cocoAspell/aspell6-en-6.0-0")
                         nil iso-8859-1)))
          `((nil ,@default)
            ("english" ,@default))))
#+end_src

** Hippie expand: at times perhaps too hip
#+begin_src emacs-lisp
  (when (boundp 'hippie-expand-try-functions-list)
    (delete 'try-expand-line hippie-expand-try-functions-list)
    (delete 'try-expand-list hippie-expand-try-functions-list))
#+end_src

** Don't clutter up directories with files~
Rather than saving backup files scattered all over the file system,
let them live in the =backups/= directory inside of the starter kit.
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . ,(expand-file-name
                                        (concat starter-kit-dir "backups")))))
#+end_src

** Default to unified diffs
#+begin_src emacs-lisp
(setq diff-switches "-u")
#+end_src

** Cosmetics

#+begin_src emacs-lisp
(eval-after-load 'diff-mode
  '(progn
     (set-face-foreground 'diff-added "green4")
     (set-face-foreground 'diff-removed "red3")))

;;can not downloaded package magit,so I(Peterson Lian) just ommit anything related to magit
;;(eval-after-load 'magit
;;  '(progn
;;     (set-face-foreground 'magit-diff-add "green3")
;;     (set-face-foreground 'magit-diff-del "red3")))
#+end_src

** Inserting Brackets by Pairs
added by Peterson Lian

#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src
** multi-web-mode
added by  Peterson Lian(AKA ablian)

configuration for  multi-web-mode

#+begin_src emacs-lisp
(require 'multi-web-mode)
(setq mweb-default-major-mode 'html-mode)
(setq mweb-tags '((php-mode "<\\?php\\|<\\? \\|<\\?=" "\\?>")
                  (js-mode "<script +\\(type=\"text/javascript\"\\|language=\"javascript\"\\)[^>]*>" "</script>")
                  (css-mode "<style +type=\"text/css\"[^>]*>" "</style>")))
(setq mweb-filename-extensions '("php" "htm" "html" "ctp" "phtml" "php4" "php5"))
(multi-web-global-mode 1)
#+end_src
** tabbar currently not using

added by  Peterson Lian(AKA ablian)
*** turn on tabbar-mode 1
(require 'tabbar)
(tabbar-mode 1)
*** set up shorcuts for forwarding and backwarding tabbar
**** forward
(global-set-key [(ctrl c) (b) (f)] 'tabbar-forward)
**** backward
(global-set-key [(ctrl c) (b) (b)] 'tabbar-backward)
<<<<<<< HEAD
** Auto-Complete Mode
added by Peterson Lian(AKA ablian)

*** configuration for Auto-Complete-mode to start with
#+begin_src emacs-lisp
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/elpa/auto-complete-20140618.2217/dict")
(ac-config-default)
#+end_src
*** after backspace some character, we still want auto-complete be triggered
#+begin_src emacs-lisp
(setq ac-trigger-commands
      (cons 'backward-delete-char-untabify ac-trigger-commands))
#+end_src
*** turn on "fuzzy" functionality
#+begin_src emacs-lisp
(setq ac-fuzzy-enable t)
#+end_src
*** compatible with "yasnippet" mode
add "ac-source-yasnippet" into variable "ac-sources"
#+begin_src emacs-lisp
(add-to-list 'ac-sources 'ac-source-yasnippet)
#+end_src
=======
>>>>>>> parent of 0dd9316... customization:Auto-Complete mode
*** turn on for other specified modes:html,etc.
**** turn on for html
#+begin_src emacs-lisp
(add-to-list 'ac-modes 'html-mode)
#+end_src
*** user defined dictionary
#+begin_src emacs-lisp
(setq ac-user-dictionary-files '("~/.emacs.d/ac-custom-dict"))
#+end_src
*** [TBC][Unresolved]resolve conflicts with fly-spell mode and other relative mode
currently I manually close fly-spell mode in the specified buffer and
then invoke Auto-Complete-mode
** yasnippet
added by Peterson Lian(AKA ablian)
*** turn on yasnippet
#+begin_src emacs-lisp
(require 'yasnippet);;not yasnippet-bundle
(yas-global-mode 1)
#+end_src
** after evoke irc-mode, adding hook to activate auto-complete mode
#+begin_src emacs-lisp
;;  (add-hook 'irc-mode-hook
;;  `(lanbda()
;;    ;;evoke auto-complete-mode
;;    (auto-complete-mode)
;;          )
;;  )
;;  (run-hooks 'irc-mode-hook)
#+end_src
** ace-jump-mode
#+begin_src emacs-lisp
(add-to-list 'load-path "/home/ablian/.emacs.d/elpa/ace-jump-20140616.115")
(require 'ace-jump-mode)
(define-key global-map (kbd "C-x SPC") 'ace-jump-mode)
#+end_src
** define one emacs command:ac. taking 1 argument to define whether open Auto-Complete mode.
没有参数:关闭fly-spell再开auto-complete
有参数，不管参数为何:关闭fly-spell不再开auto-complete

#+begin_src emacs-lisp
  (defun ac(&optional arg)
    "defaultly with no argument, close 'flyspell-mode and then open 'auto-complete mode
    if there was an argument, then close 'flyspell-mode and not opening 'auto-complete mode
    It's a workaround for my 'flyspell-mode conflicts with auto-complete mode'
    Author: Peterson Lian
    Email:lianpeipei202@gmail.com
    "
    (interactive "P")
    (if arg
      ;;argument is not 'nil,just close 'flyspell-mode
      (progn
      (flyspell-mode 0)
      (auto-fill-mode 0)
      (toggle-truncate-lines)
      )
      ;;argument is 'nil, close 'flyspell-mode and open 'Auto-complete mode
      (progn 
      (flyspell-mode 0)
      (auto-complete-mode 1)
      (auto-fill-mode 0)
      (toggle-truncate-lines)
      ))
    )
  
  (defun wtn(&optional arg)
    "do one thing: revert-buffer-with-coding-system chinese-gbk"
    (interactive "P")
    (progn
      (revert-buffer-with-coding-system 'chinese-gbk)
      (ac)
    )
    )
#+end_src
** auctex[TBC][NOT AVAILABLE]
配置auctex
+begin_src emacs-lisp
(load "auctex.el" nil t t)
(load "preview-latex.el" nil t t)
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
+end_src
** gmail
more details, check out [[http://www.emacswiki.org/emacs/GnusGmai][GnusGmail]] and [[http://blog.csdn.net/csfreebird/article/details/7191463][傻瓜式入门]]
** writing novel
+begin_src emacs-lisp
              (defun wtn(&optional arg)
                "用来定义个人写作环境
            此函数一般都是在打开‘第一步小说.txt’之后调用
            一般这个文件打开之后，拥有如下mode '(Org Fly yas Fill)'
            所以，这个函数做如下工作:
            关闭flyspell-mode、auto-fill-mode;开启toggle-truncate-lines函数;
            开启auto-complete-mode函数；
            分割窗口成2个字窗口，上面那个窗口较下，下面较大
            "
                (interactive)
                (progn
                  (flyspell-mode 0)
                  (auto-fill-mode 0)
                  (Auto-Complete-mode 1)
                  (toggle-truncate-lines)
                  (split-window-below 6))
              )
+end_src
** smex
added by ablian(AKA Peterson Lian)
绑定smex到M-x替代原有的execute-extended-command
原有的execute-extended-command重新绑定到 C-c C-c M-x

#+begin_src emacs-lisp
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  (global-set-key (kbd "C-c M-x") 'smex-update)
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+end_src
** window-number
#+begin_src emacs-lisp
(require 'window-number)
;;this is used to number window for view.without this line, window is switchable
;;but you don't know every windows' number.You will have to guess it
(window-number-mode 1)
;;key binding
(global-set-key (kbd "C-x o") 'window-number-switch)
#+end_src
** code folding代码折叠
具体见此链接 https://github.com/zenozeng/yafolding.el
将自定义的el文件，放到.emacs.d/src文件夹下，貌似这样会先被读入？？
*** keybindings
#+begin_src emacs-lisp
(require 'yafolding)

(define-key yafolding-mode-map (kbd "<C-S-return>") nil)
(define-key yafolding-mode-map (kbd "<C-return>") nil)
(define-key yafolding-mode-map (kbd "C-c <C-S-return>") 'yafolding-toggle-all)
(define-key yafolding-mode-map (kbd "C-c <C-return>") 'yafolding-toggle-element)
#+end_src
** prog-mode-hook
prog-mode-hook is introduced in version 24.1
全局关闭flyspell-mode 和 auto-fill-mode
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook (lambda() 
                              (progn 
                                (flyspell-mode 0)
                                (auto-complete-mode 1)
                                (auto-fill-mode 0)
                                (toggle-truncate-lines)
                                )
  ))
    
#+end_src      
