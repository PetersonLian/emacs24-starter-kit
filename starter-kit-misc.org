#+TITLE: Starter Kit Misc
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Misc
Things that don't fit anywhere else.

** Check Dependencies

Determine whether required packages are installed. If not, use ELPA to
install them. Other dependencies are provided by Emacs 24.
#+begin_src emacs-lisp
;;can not downloaded package magit,so I(Peterson Lian) just ommit anything related to magit
;;  (starter-kit-install-if-needed 'magit)
#+end_src

** Color Themes
Emacs24 has build in support for saving and loading themes.

A Theme builder is available at http://elpa.gnu.org/themes/ along with
a list of pre-built themes at http://elpa.gnu.org/themes/view.html and
themes are available through ELPA.

Downloaded themes may be saved to the =themes/= directory in the base
of the starter kit which ignored by git.  Once downloaded and
evaluated a theme is activated using the =load-theme= function.

** Window systems
#+srcname: starter-kit-window-view-stuff
#+begin_src emacs-lisp 
  (when window-system
    (setq frame-title-format '(buffer-file-name "%f" ("%b")))
    (blink-cursor-mode -1)
    (when (require 'mwheel nil 'no-error) (mouse-wheel-mode t)))
  
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  
  (setq visible-bell t
        echo-keystrokes 0.1
        font-lock-maximum-decoration t
        inhibit-startup-message t
        transient-mark-mode t
        color-theme-is-global t
        delete-by-moving-to-trash t
        shift-select-mode nil
        truncate-partial-width-windows nil
        uniquify-buffer-name-style 'forward
        whitespace-style '(trailing lines space-before-tab
                                    indentation space-after-tab)
        whitespace-line-column 100
        ediff-window-setup-function 'ediff-setup-windows-plain
        oddmuse-directory (concat starter-kit-dir "oddmuse")
        xterm-mouse-mode t
        save-place-file (concat starter-kit-dir "places"))
#+end_src

** Transparently open compressed files
#+begin_src emacs-lisp
(auto-compression-mode t)
#+end_src

** Save a list of recent files visited.
#+begin_src emacs-lisp 
(recentf-mode 1)
#+end_src emacs-lisp

** Highlight matching parentheses when the point is on them.
#+srcname: starter-kit-match-parens
#+begin_src emacs-lisp 
(show-paren-mode 1)
#+end_src

** ido mode
ido-mode is like magic pixie dust!
#+srcname: starter-kit-loves-ido-mode
#+begin_src emacs-lisp 
(when (> emacs-major-version 21)
  (ido-mode t)
  (setq ido-enable-prefix nil
        ido-enable-flex-matching t
        ido-create-new-buffer 'always
        ido-use-filename-at-point t
        ido-max-prospects 10))
#+end_src

** Other, spell checking, tabs, imenu and a coding hook
#+begin_src emacs-lisp 
  (set-default 'indent-tabs-mode nil)
  (set-default 'indicate-empty-lines t)
  (set-default 'imenu-auto-rescan t)
  
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'text-mode-hook 'turn-on-flyspell)
  
  (defvar starter-kit-coding-hook nil
    "Hook that gets run on activation of any programming mode.")
  
  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; Seed the random-number generator
  (random t)
#+end_src

*** functions for prettier source code
#+begin_src emacs-lisp
(defun starter-kit-pretty-lambdas ()
  (font-lock-add-keywords
   nil `(("(\\(lambda\\>\\)"
          (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                    ,(make-char 'greek-iso8859-7 107))
                    nil))))))
#+end_src

*** possible issues/resolutions with flyspell
Most of the solution came from [[http://www.emacswiki.org/emacs/FlySpell][EmacsWiki-FlySpell]].  Here is one
possible fix.

**** Emacs set path to aspell
it's possible aspell isn't in your path
#+begin_src emacs-lisp :tangle no
   (setq exec-path (append exec-path '("/opt/local/bin")))
#+end_src

**** Emacs specify spelling program
- This didn't work at first, possibly because cocoAspell was
  building its dictionary.  Now it seems to work fine.
#+begin_src emacs-lisp :tangle no
  (setq ispell-program-name "aspell"
        ispell-dictionary "english"
        ispell-dictionary-alist
        (let ((default '("[A-Za-z]" "[^A-Za-z]" "[']" nil
                         ("-B" "-d" "english" "--dict-dir"
                          "/Library/Application Support/cocoAspell/aspell6-en-6.0-0")
                         nil iso-8859-1)))
          `((nil ,@default)
            ("english" ,@default))))
#+end_src

** Hippie expand: at times perhaps too hip
#+begin_src emacs-lisp
  (when (boundp 'hippie-expand-try-functions-list)
    (delete 'try-expand-line hippie-expand-try-functions-list)
    (delete 'try-expand-list hippie-expand-try-functions-list))
#+end_src

** Don't clutter up directories with files~
Rather than saving backup files scattered all over the file system,
let them live in the =backups/= directory inside of the starter kit.
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . ,(expand-file-name
                                        (concat starter-kit-dir "backups")))))
#+end_src

** Default to unified diffs
#+begin_src emacs-lisp
(setq diff-switches "-u")
#+end_src

** Cosmetics

#+begin_src emacs-lisp
(eval-after-load 'diff-mode
  '(progn
     (set-face-foreground 'diff-added "green4")
     (set-face-foreground 'diff-removed "red3")))

;;can not downloaded package magit,so I(Peterson Lian) just ommit anything related to magit
;;(eval-after-load 'magit
;;  '(progn
;;     (set-face-foreground 'magit-diff-add "green3")
;;     (set-face-foreground 'magit-diff-del "red3")))
#+end_src

** Inserting Brackets by Pairs
added by Peterson Lian

#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src
** multi-web-mode
added by  Peterson Lian(AKA ablian)

configuration for  multi-web-mode

#+begin_src emacs-lisp
(require 'php-mode)
(require 'multi-web-mode)
(setq mweb-default-major-mode 'html-mode)
(setq mweb-tags '((php-mode "<\\?php\\|<\\? \\|<\\?=" "\\?>")
                  (js-mode "<script[^>]*>" "</script>")
                  (css-mode "<style[^>]*>" "</style>")))
(setq mweb-filename-extensions '("php" "htm" "html" "ctp" "phtml" "php4" "php5"))
(multi-web-global-mode 1)
#+end_src
** tabbar currently not using

added by  Peterson Lian(AKA ablian)
*** turn on tabbar-mode 1
(require 'tabbar)
(tabbar-mode 1)
*** set up shorcuts for forwarding and backwarding tabbar
**** forward
(global-set-key [(ctrl c) (b) (f)] 'tabbar-forward)
**** backward
(global-set-key [(ctrl c) (b) (b)] 'tabbar-backward)
<<<<<<< HEAD
** Auto-Complete Mode
added by Peterson Lian(AKA ablian)

*** configuration for Auto-Complete-mode to start with
#+begin_src emacs-lisp
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/elpa/auto-complete-20140618.2217/dict")
(ac-config-default)
#+end_src
*** after backspace some character, we still want auto-complete be triggered
#+begin_src emacs-lisp
(setq ac-trigger-commands
      (cons 'backward-delete-char-untabify ac-trigger-commands))
#+end_src
*** turn on "fuzzy" functionality
#+begin_src emacs-lisp
(setq ac-fuzzy-enable t)
#+end_src
*** compatible with "yasnippet" mode
add "ac-source-yasnippet" into variable "ac-sources"
#+begin_src emacs-lisp
(add-to-list 'ac-sources 'ac-source-yasnippet)
#+end_src
=======
>>>>>>> parent of 0dd9316... customization:Auto-Complete mode
*** turn on for other specified modes:html,etc.
**** turn on for html
#+begin_src emacs-lisp
(add-to-list 'ac-modes 'html-mode)
#+end_src
*** user defined dictionary
#+begin_src emacs-lisp
(setq ac-user-dictionary-files '("~/.emacs.d/ac-custom-dict"))
#+end_src
*** [TBC][Unresolved]resolve conflicts with fly-spell mode and other relative mode
currently I manually close fly-spell mode in the specified buffer and
then invoke Auto-Complete-mode
** yasnippet
added by Peterson Lian(AKA ablian)
*** turn on yasnippet
#+begin_src emacs-lisp
(require 'yasnippet);;not yasnippet-bundle
(yas-global-mode 1)
#+end_src
** after evoke irc-mode, adding hook to activate auto-complete mode
#+begin_src emacs-lisp
;;  (add-hook 'irc-mode-hook
;;  `(lanbda()
;;    ;;evoke auto-complete-mode
;;    (auto-complete-mode)
;;          )
;;  )
;;  (run-hooks 'irc-mode-hook)
#+end_src
** ace-jump-mode
#+begin_src emacs-lisp
(add-to-list 'load-path "/home/ablian/.emacs.d/elpa/ace-jump-20140616.115")
(require 'ace-jump-mode)
(define-key global-map (kbd "C-x SPC") 'ace-jump-mode)
#+end_src
** define one emacs command:ac. taking 1 argument to define whether open Auto-Complete mode.
没有参数:关闭fly-spell再开auto-complete
有参数，不管参数为何:关闭fly-spell不再开auto-complete

#+begin_src emacs-lisp
  (defun ac(&optional arg)
    "defaultly with no argument, close 'flyspell-mode and then open 'auto-complete mode
    if there was an argument, then close 'flyspell-mode and not opening 'auto-complete mode
    It's a workaround for my 'flyspell-mode conflicts with auto-complete mode'
    Author: Peterson Lian
    Email:lianpeipei202@gmail.com
    "
    (interactive "P")
    (if arg
      ;;argument is not 'nil,just close 'flyspell-mode
      (progn
      (flyspell-mode 0)
      (auto-fill-mode 0)
      (toggle-truncate-lines)
      (yafolding-mode 1)
      )
      ;;argument is 'nil, close 'flyspell-mode and open 'Auto-complete mode
      (progn 
      (flyspell-mode 0)
      (auto-complete-mode 1)
      (auto-fill-mode 0)
      (toggle-truncate-lines)
      (yafolding-mode 1)
      ))
    )
  
  (defun wtn(&optional arg)
    "do one thing: revert-buffer-with-coding-system chinese-gbk"
    (interactive "P")
    (progn
      (revert-buffer-with-coding-system 'chinese-gbk)
      (ac)
    )
    )
#+end_src
** auctex[TBC][NOT AVAILABLE]
配置auctex
+begin_src emacs-lisp
(load "auctex.el" nil t t)
(load "preview-latex.el" nil t t)
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
+end_src
** gmail
more details, check out [[http://www.emacswiki.org/emacs/GnusGmai][GnusGmail]] and [[http://blog.csdn.net/csfreebird/article/details/7191463][傻瓜式入门]]
** writing novel
+begin_src emacs-lisp
              (defun wtn(&optional arg)
                "用来定义个人写作环境
            此函数一般都是在打开‘第一步小说.txt’之后调用
            一般这个文件打开之后，拥有如下mode '(Org Fly yas Fill)'
            所以，这个函数做如下工作:
            关闭flyspell-mode、auto-fill-mode;开启toggle-truncate-lines函数;
            开启auto-complete-mode函数；
            分割窗口成2个字窗口，上面那个窗口较下，下面较大
            "
                (interactive)
                (progn
                  (flyspell-mode 0)
                  (auto-fill-mode 0)
                  (Auto-Complete-mode 1)
                  (toggle-truncate-lines)
                  (split-window-below 6))
              )
+end_src
** smex
added by ablian(AKA Peterson Lian)
绑定smex到M-x替代原有的execute-extended-command
原有的execute-extended-command重新绑定到 C-c C-c M-x

#+begin_src emacs-lisp
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  (global-set-key (kbd "C-c M-x") 'smex-update)
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+end_src
** window-number
#+begin_src emacs-lisp
(require 'window-number)
;;this is used to number window for view.without this line, window is switchable
;;but you don't know every windows' number.You will have to guess it
(window-number-mode 1)
;;key binding
(global-set-key (kbd "C-x o") 'window-number-switch)
#+end_src
** code folding代码折叠
具体见此链接 https://github.com/zenozeng/yafolding.el
将自定义的el文件，放到.emacs.d/src文件夹下，貌似这样会先被读入？？
** yafolding.el keybindings
using 'RET' instead of '<return>'.
why?see [[http://ergoemacs.org/emacs/emacs_key_notation_return_vs_RET.html][reason]]
#+begin_src emacs-lisp
(require 'yafolding)
(define-key yafolding-mode-map (kbd "C-c C-a RET") 'yafolding-toggle-all)
(define-key yafolding-mode-map (kbd "C-c C-e RET") 'yafolding-toggle-element)
#+end_src
** prog-mode-hook
已经写进到./init.el文件中
** auto-coding-alist自动在所有打开的mode里头打开自定义的ac函数
不能用，貌似会覆盖掉所有的其他mode。即，一个org文件，我同时也是需要它
能自发开启org-mode的
+begin_src emacs-lisp
   (add-to-list 'auto-mode-alist '("\\.*$" . ac))
+end_src
** php配置环境
具体参考[[http://truongtx.me/2014/07/22/setup-php-development-environment-in-emacs/][这个文档]]


#+begin_src emacs-lisp
    (defun my-setup-php ()
      ;; enable web mode
      (web-mode)
    
      ;; make these variables local
      (make-local-variable 'web-mode-code-indent-offset)
      (make-local-variable 'web-mode-markup-indent-offset)
      (make-local-variable 'web-mode-css-indent-offset)
    
      ;; set indentation, can set different indentation level for different code type
      (setq web-mode-code-indent-offset 4)
      (setq web-mode-css-indent-offset 2)
      (setq web-mode-markup-indent-offset 2))
    
    (add-to-list 'auto-mode-alist '("\\.php$" . my-setup-php))
#+end_src

;;Syntax Checking for PHP files

    (flycheck-define-checker my-php
    "A PHP syntax checker using the PHP command line interpreter.
  
  See URL `http://php.net/manual/en/features.commandline.php'."
    :command ("php" "-l" "-d" "error_reporting=E_ALL" "-d" "display_errors=1"
              "-d" "log_errors=0" source)
    :error-patterns
    ((error line-start (or "Parse" "Fatal" "syntax") " error" (any ":" ",") " "
            (message) " in " (file-name) " on line " line line-end))
    :modes (php-mode php+-mode web-mode))
    (flycheck-select-checker my-php)
   (flycheck-mode t))

** global-auto-revert-mode

#+begin_src emacs-lisp    
    ;;turn on global-auto-revert-mode
    (global-auto-revert-mode t)
#+end_src
** 文件末尾不自动添加newline，为了和公司项目统一。
require-final-newline 起作用
而有些mode，require-final-newline变量又是根据mode-require-final-newline来设置的。
总之，直接进去[[file:/usr/local/share/emacs/24.3/lisp/files.el.gz::(defcustom%20require-final-newline%20nil][文件里设置require-final-newline]] 或者 设置[[file:/usr/local/share/emacs/24.3/lisp/files.el.gz::(defcustom%20mode-require-final-newline%20t][mode-require-final-newline]]

** dired
located in init.el
** open file in external app && open file in Desktop
more details in xah lee's [[http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html][this post]]
defined two functions
#+begin_src emacs-lisp
(defun xah-open-in-external-app (&optional file)
  "Open the current file or dired marked files in external app.

The app is chosen from your OS's preference."
  (interactive)
  (let ( doIt
         (myFileList
          (cond
           ((string-equal major-mode "dired-mode") (dired-get-marked-files))
           ((not file) (list (buffer-file-name)))
           (file (list file)))))
    
    (setq doIt (if (<= (length myFileList) 5)
                   t
                 (y-or-n-p "Open more than 5 files? ") ) )
    
    (when doIt
      (cond
       ((string-equal system-type "windows-nt")
        (mapc (lambda (fPath) (w32-shell-execute "open" (replace-regexp-in-string "/" "\\" fPath t t)) ) myFileList))
       ((string-equal system-type "darwin")
        (mapc (lambda (fPath) (shell-command (format "open \"%s\"" fPath)) )  myFileList) )
       ((string-equal system-type "gnu/linux")
        (mapc (lambda (fPath) (let ((process-connection-type nil)) (start-process "" nil "xdg-open" fPath)) ) myFileList) ) ) ) ) )

(defun xah-open-in-desktop ()
  "Show current file in desktop (OS's file manager)."
  (interactive)
  (cond
   ((string-equal system-type "windows-nt")
    (w32-shell-execute "explore" (replace-regexp-in-string "/" "\\" default-directory t t)))
   ((string-equal system-type "darwin") (shell-command "open ."))
   ((string-equal system-type "gnu/linux")
    (let ((process-connection-type nil)) (start-process "" nil "xdg-open" "."))
    ;; (shell-command "xdg-open .") ;; 2013-02-10 this sometimes froze emacs till the folder is closed. ⁖ with nautilus
    ) ))
#+end_src
** define a emacs command, used to do following steps
直接运行C-c C-t TODO && C-c C-s

#+begin_src emacs-lisp
  (defun schedule-org-ablian(&optional arg)
    "do one thing in org mode : C-c C-t TODO && C-c C-s"
    (interactive "P")
    (progn 
      (org-todo 'done)
      (org-agenda-schedule 'arg)
      )
  )
#+end_src
** save-macro
   ask for the name of the macro and insert its definition at point.
   借鉴于http://www.emacswiki.org/emacs/KeyboardMacrosTricks#toc5 的saving a macro 章节.


#+begin_src emacs-lisp
  (defun save-macro (name)                  
   "save a macro. Take a name as argument
    and save the last defined macro under 
    this name at the end of your .emacs"
    (interactive "SName of the macro :")  ; ask for the name of the macro    
    (kmacro-name-last-macro name)         ; use this name for the macro    
    (find-file user-init-file)            ; open ~/.emacs or other user init file 
    (goto-char (point-max))               ; go to the end of the .emacs
    (newline)                             ; insert a newline
    (insert-kbd-macro name)               ; copy the macro 
    (newline)                             ; insert a newline
    (switch-to-buffer nil))               ; return to the initial buffer
#+end_src
** flymake-jslint
  http://www.emacswiki.org/cgi-bin/wiki/FlymakeJavaScript
  http://d.hatena.ne.jp/kazu-yamamoto/mobile?date=20071029

I(ablian) used jshint instead

  
+begin_src emacs-lisp  
  
      
      
      ;;; flymake-jslint.el --- A flymake handler for javascript using jslint
  ;;
    ;;; Author: Steve Purcell <steve@sanityinc.com>
    ;;; Homepage: https://github.com/purcell/flymake-jslint
    ;;; Version: DEV
    ;;; Package-Requires: ((flymake-easy "0.1"))
  ;;
    ;;; Commentary:
  ;;
  ;; References:
  ;;   http://www.emacswiki.org/cgi-bin/wiki/FlymakeJavaScript
  ;;   http://d.hatena.ne.jp/kazu-yamamoto/mobile?date=20071029
  ;;
  ;; Works with either "jslint" from jslint.com, or "jsl" from
  ;; javascriptlint.com. The default is "jsl", if that executable is
  ;; found at load-time. Otherwise, "jslint" is the default. If you want
  ;; to use the non-default checker, you can customize the values of
  ;; `flymake-jslint-command' and `flymake-jslint-args' accordingly.
  ;;
  ;; Usage:
  ;;   (require 'flymake-jslint)
  ;;   (add-hook 'js-mode-hook 'flymake-jslint-load)
  ;;
  ;; Uses flymake-easy, from https://github.com/purcell/flymake-easy
  
    ;;; Code:
  
  (require 'flymake-easy)
  
  (defgroup flymake-jslint nil
    "Flymake checking of Javascript using jslint"
    :group 'programming
    :prefix "flymake-jslint-")
  
    ;;;###autoload
  (defcustom flymake-jslint-detect-trailing-comma t
    "Whether or not to report warnings about trailing commas."
    :type 'boolean :group 'flymake-jslint)
  
    ;;;###autoload
  (defcustom flymake-jslint-command
    (if (executable-find "jsl") "jsl" "jslint")
    "Name (and optionally full path) of jslint executable."
    :type 'string :group 'flymake-jslint)
  
    ;;;###autoload
  (defcustom flymake-jslint-args
    (unless (string-equal "jsl" flymake-jslint-command)
      (mapcar
       'symbol-name
       '(--white --undef --nomen --regexp --plusplus --bitwise --newcap --sloppy --vars --eqeq)))
    "Command-line args for jslint executable."
    :type '(repeat string) :group 'flymake-jslint)
  
  (defconst flymake-jslint-err-line-patterns
    '(("^ *#[0-9]+ \\(.*?\\)\n.*?// Line \\([0-9]+\\), Pos \\([0-9]+\\)$" nil 2 3 1)
      ;; jsl
      ("^\\(.+\\)\:\\([0-9]+\\)\: \\(SyntaxError\:.+\\)\:$" nil 2 nil 3)
      ("^\\(.+\\)(\\([0-9]+\\)): \\(SyntaxError:.+\\)$" nil 2 nil 3)
      ("^\\(.+\\)(\\([0-9]+\\)): \\(lint \\)?\\(warning:.+\\)$" nil 2 nil 4)))
  (defconst flymake-jslint-trailing-comma-err-line-pattern
    '("^\\(.+\\)\:\\([0-9]+\\)\: strict \\(warning: trailing comma.+\\)\:$" nil 2 nil 3))
  
  (defun flymake-jslint-command (filename)
    "Construct a command that flymake can use to check javascript source."
    (append
     (list flymake-jslint-command)
     flymake-jslint-args
     (unless (string-match "jslint" flymake-jslint-command)
       ;; jsl required option
       (list "-process"))
     (list filename)))
  
    ;;;###autoload
  (defun flymake-jslint-load ()
    "Cofigure flymake mode to check the current buffer's javascript syntax."
    (interactive)
    (flymake-easy-load 'flymake-jslint-command
                       (append flymake-jslint-err-line-patterns
                               (when flymake-jslint-detect-trailing-comma
                                 (list flymake-jslint-trailing-comma-err-line-pattern)))
                       'tempdir
                       "js"))
  (provide 'flymake-jslint)
  
  
  ;;;usage
  (require 'flymake-jslint)
  (add-hook 'js-mode-hook 'flymake-jslint-load)
  
+end_src
** flymake-jshint

   Seems like my flymake is polluted by jshint and jslint.Suspending........

   
+begin_src emacs-lisp
    ;;; flymake-jshint.el --- making flymake work with JSHint
    
    ;; Copyright (C) 2012 Wilfred Hughes <me@wilfred.me.uk>
    
    ;; Author: Wilfred Hughes <me@wilfred.me.uk>
    ;; Created: 23 June 2011
    ;; Version: 2.2
    ;; Keywords: flymake, jshint, javascript
    ;; Package-Requires: ((flymake-easy "0.8"))
    
    ;; This file is not part of GNU Emacs.
    ;; However, it is distributed under the same license.
    
    ;; GNU Emacs is free software; you can redistribute it and/or modify
    ;; it under the terms of the GNU General Public License as published by
    ;; the Free Software Foundation; either version 3, or (at your option)
    ;; any later version.
    
    ;; GNU Emacs is distributed in the hope that it will be useful,
    ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
    ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    ;; GNU General Public License for more details.
    
    ;; You should have received a copy of the GNU General Public License
    ;; along with GNU Emacs; see the file COPYING.  If not, write to the
    ;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    ;; Boston, MA 02110-1301, USA.
    
    ;;; Commentary:
    
    ;; Please see README.md (online at
    ;; https://github.com/Wilfred/flymake-jshint.el#flymake-jshint ) for
    ;; installation and usage instructions.
    
    ;;; Code:
    
    (require 'flymake-easy)
    
    (defconst flymake-jshint-err-line-patterns
      '(("^\\(.*\\): line \\([[:digit:]]+\\), col \\([[:digit:]]+\\), \\(.+\\)$"
         1 2 3 4)))
    
    (defcustom jshint-configuration-path nil
      "Path to a JSON coguration file for JSHint."
      :type 'file
      :group 'flymake-jshint)
    
    (defun flymake-jshint-command (filename)
      "Construct a command that flymake can use to check javascript source for FILENAME."
      (if jshint-configuration-path
          (list "jshint" filename "--config" (expand-file-name jshint-configuration-path))
        (list "jshint" filename))
      )
    
    ;;;###autoload
    (defun flymake-jshint-load ()
      "Configue flymake mode to check the current buffer's javascript syntax."
      (interactive)
      (flymake-easy-load
       'flymake-jshint-command
       flymake-jshint-err-line-patterns
       'tempdir
       "js")
    )
    
    (provide 'flymake-jshint)
    
    ;;;usage
    (require 'flymake-jshint)
  (add-hook 'js-mode-hook 'flymake-jshint-load)
  (setq jshint-configuration-path "~/.emacs.d/jshintCfg.json")
+end_src
** html-mode-hook 'ac
#+begin_src emacs-lisp
(add-hook 'html-mode-hook 'ac)
#+end_src
** js-mode-hook
#+begin_src emacs-lisp
(add-hook 'js-mode-hook 'ac)
#+end_src
** css-mode-hook
#+begin_src emacs-lisp
(add-hook 'css-mode-hook 'ac)
#+end_src
** prog-mode-hook
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'ac)
#+end_src
   
